package main

import (
	"bytes"
	"log"
	"text/template"
)

const TemplateStitchingSQL = `// Code generated by "gml"; DO NOT EDIT.
package {{.Package}}

import(
	"database/sql"
	"errors"
	{{if .IsAddImport}}"github.com/ganLuo960214/StitchingSQLGo"{{end}}
)

// --- basic sql method ---
var (
	ErrorDBIsNil = errors.New("db is nil")
	ErrorTxIsNil = errors.New("tx is nil")
)

func QueryRowScan(db *sql.DB, s {{if .IsAddImport}}StitchingSQLGo.{{end}}Query,scans ...interface{}) error {
    if db == nil {
        return ErrorDBIsNil
    }

	sql, args, err := s.Query()
	if err != nil {
		return err
	}

	if err := db.QueryRow(sql, args...).Scan(scans...); err != nil {
		return err
	}
	return nil
}

func TxQueryRowScan(tx *sql.Tx, s {{if .IsAddImport}}StitchingSQLGo.{{end}}Query,scans ...interface{}) error {
    if tx == nil {
        return ErrorTxIsNil
    }

	sql, args, err := s.Query()
	if err != nil {
		return err
	}

	if err := tx.QueryRow(sql, args...).Scan(scans...); err != nil {
		return err
	}

	return nil
}
`

type TemplateStitchingSQLContent struct {
	Package     string
	IsAddImport bool
}

func (c TemplateStitchingSQLContent) generateContent() []byte {
	templateStitchingSQLSourceContent := bytes.NewBuffer([]byte{})
	templateStitchingSQLSource, err := template.New("").Parse(TemplateStitchingSQL)
	if err != nil {
		log.Fatal(err)
	}
	if err := templateStitchingSQLSource.Execute(templateStitchingSQLSourceContent, TemplateStitchingSQLContent{
		Package:     GOPACKAGE,
		IsAddImport: flags.IsAddImport,
	}); err != nil {
		log.Fatal(err)
	}

	return templateStitchingSQLSourceContent.Bytes()
}
